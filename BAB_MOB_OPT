<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Burnaby Arms - Darts Scorer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .hidden { display: none !important; }
        #toast-notification {
            transition: transform 0.5s ease-in-out;
        }
        .modal-overlay {
            transition: opacity 0.3s ease;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <!-- Main container with responsive padding -->
    <div class="max-w-4xl mx-auto p-2 sm:p-4 lg:p-8 relative pt-6">

        <!-- Hamburger Menu Button -->
        <button id="hamburger-btn" class="md:hidden absolute top-4 right-2 z-50 p-2">
            <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path></svg>
        </button>


        <!-- Connection Status -->
        <div id="connection-status" class="text-center p-4 mb-4 bg-yellow-100 text-yellow-800 rounded-xl hidden">Connecting to database...</div>


        <!-- Desktop Tabs Navigation -->
        <div id="desktop-nav" class="hidden md:block mb-6">
            <div class="border-b border-gray-200">
                <nav class="-mb-px flex justify-center space-x-4 sm:space-x-6" aria-label="Tabs">
                    <button id="tab-btn-match" class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors duration-200">Current Match</button>
                    <button id="tab-btn-live" class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors duration-200">Scoring</button>
                    <button id="tab-btn-previous" class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors duration-200">Previous</button>
                    <button id="tab-btn-fines" class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors duration-200">Fines</button>
                    <button id="tab-btn-stats" class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors duration-200">Stats</button>
                    <button id="tab-btn-setup" class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors duration-200">Setup</button>
                    <button id="tab-btn-admin" class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors duration-200">Admin</button>
                </nav>
            </div>
        </div>

        <!-- Current Match Tab -->
        <div id="tab-content-match">
             <div class="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
                 <div class="p-4 sm:p-6">
                     <h2 class="text-xl sm:text-2xl font-bold text-gray-900">Current Match</h2>
                     <p id="current-match-opponent" class="mt-1 text-sm text-gray-600">Live results as they come in.</p>
                 </div>
                 <div id="current-match-score-container" class="px-4 sm:px-6 pb-4"></div>
                 <div id="current-match-results" class="p-4 sm:p-6 space-y-4 border-t border-gray-200"></div>
             </div>
        </div>

        <!-- Previous Matches Tab -->
        <div id="tab-content-previous" class="hidden">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 sm:gap-8">
                <div class="md:col-span-1">
                    <div class="bg-white p-4 sm:p-6 rounded-2xl shadow-sm border border-gray-200">
                        <h2 class="text-xl font-semibold mb-4">Match History</h2>
                        <div id="previous-matches-list" class="space-y-2"></div>
                    </div>
                </div>
                <div class="md:col-span-2">
                    <div id="previous-match-details" class="bg-white p-4 sm:p-6 rounded-2xl shadow-sm border border-gray-200">
                        <p class="text-gray-500">Select a match to see the details.</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Fines Tab -->
        <div id="tab-content-fines" class="hidden">
            <div class="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="p-4 sm:p-6">
                    <h2 class="text-xl sm:text-2xl font-bold text-gray-900">Outstanding Fines</h2>
                    <p class="mt-1 text-sm text-gray-600">Track and clear player fines.</p>
                </div>
                <div id="fines-list" class="divide-y divide-gray-200"></div>
                <!-- Pay Fine Button Container -->
                <div id="pay-fine-container" class="p-4 sm:p-6 border-t border-gray-200 hidden">
                    <a href="https://monzo.me/jacobrobertfordham?h=8XgSRd" target="_blank" class="block w-full text-center bg-emerald-600 text-white py-3 px-4 rounded-xl hover:bg-emerald-700 transition-colors duration-200 font-semibold">
                        Pay My Fine
                   </a>
               </div>
            </div>
        </div>

        <!-- Match Setup Tab -->
        <div id="tab-content-setup" class="hidden">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-8">
                <!-- Left Column -->
                <div>
                    <div class="bg-white p-4 sm:p-6 rounded-2xl shadow-sm border border-gray-200 mb-8">
                        <h2 class="text-xl font-semibold mb-4">Player Roster</h2>
                        <div id="player-roster-list" class="space-y-3 mb-4"></div>
                        <div class="space-y-2">
                            <input type="text" id="new-player-name-input" placeholder="Enter new player name" class="w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-emerald-500 focus:border-emerald-500">
                            <button id="add-player-btn" class="w-full bg-gray-800 text-white py-2 px-4 rounded-xl hover:bg-gray-700 transition-colors duration-200">Add Player</button>
                        </div>
                    </div>
                    <div class="bg-white p-4 sm:p-6 rounded-2xl shadow-sm border border-gray-200">
                        <h2 class="text-xl font-semibold mb-4">Season Management</h2>
                        <div id="seasons-list" class="space-y-3 mb-4"></div>
                        <div class="space-y-2">
                            <input type="text" id="new-season-name-input" placeholder="e.g., Summer 25" class="w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-emerald-500 focus:border-emerald-500">
                            <button id="add-season-btn" class="w-full bg-gray-800 text-white py-2 px-4 rounded-xl hover:bg-gray-700 transition-colors duration-200">Add New Season</button>
                        </div>
                    </div>
                </div>
                <!-- Right Column -->
                <div class="bg-white p-4 sm:p-6 rounded-2xl shadow-sm border border-gray-200">
                    <h2 class="text-xl font-semibold mb-4">Setup New Match</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700">Season</label>
                        <p id="active-season-display" class="mt-1 text-lg font-semibold text-emerald-600"></p>
                    </div>
                    <div class="mb-4">
                         <label for="opposition-name" class="block text-sm font-medium text-gray-700">Opposition Name</label>
                         <input type="text" id="opposition-name-input" placeholder="e.g., The King's Arms" class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-emerald-500 focus:border-emerald-500">
                    </div>
                    <div id="fixture-setup-form" class="space-y-4"></div>
                    <div class="mt-6">
                        <button id="create-fixture-btn" class="w-full bg-emerald-600 text-white py-3 px-4 rounded-xl hover:bg-emerald-700 transition-colors duration-200 font-semibold text-lg">Create & Start Fixture</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Live Scoring Tab -->
        <div id="tab-content-live" class="hidden">
            <div id="live-match-content" class="bg-white p-4 sm:p-6 rounded-2xl shadow-sm border border-gray-200">
                <div class="flex justify-between items-center mb-4">
                    <button id="prev-game-btn" class="bg-gray-800 text-white py-2 px-4 sm:px-5 rounded-xl hover:bg-gray-700 disabled:opacity-50 transition-colors duration-200 text-sm sm:text-base">Prev</button>
                    <h2 id="game-nav-title" class="text-xl sm:text-2xl font-bold text-center mx-2"></h2>
                    <button id="next-game-btn" class="bg-gray-800 text-white py-2 px-4 sm:px-5 rounded-xl hover:bg-gray-700 disabled:opacity-50 transition-colors duration-200 text-sm sm:text-base">Next</button>
                </div>
                <div id="live-scoring-score-container" class="mb-4"></div>
                <div class="border-t border-gray-200 pt-4">
                    <h3 id="current-player-names" class="text-2xl sm:text-3xl font-bold text-center text-emerald-600 mb-6"></h3>

                    <!-- Shared Stats -->
                    <div class="grid grid-cols-2 gap-4 mb-6 text-center">
                        <div class="bg-gray-100 p-3 sm:p-4 rounded-2xl">
                            <label class="text-sm font-medium text-gray-600">Legs Won</label>
                            <div class="flex items-center justify-center space-x-3 mt-2">
                                <!-- Larger touch targets for buttons -->
                                <button data-stat="legsWon" data-op="-1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">-</button>
                                <span id="stat-legsWon" class="text-3xl font-bold">0</span>
                                <button data-stat="legsWon" data-op="1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">+</button>
                            </div>
                        </div>
                         <div class="bg-gray-100 p-3 sm:p-4 rounded-2xl">
                            <label class="text-sm font-medium text-gray-600">Legs Lost</label>
                            <div class="flex items-center justify-center space-x-3 mt-2">
                                <button data-stat="legsLost" data-op="-1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">-</button>
                                <span id="stat-legsLost" class="text-3xl font-bold">0</span>
                                <button data-stat="legsLost" data-op="1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">+</button>
                            </div>
                        </div>
                    </div>

                    <!-- Singles Scoring -->
                    <div id="singles-scoring-panel" class="flex flex-wrap justify-center gap-2 sm:gap-4 mb-6">
                        <div class="bg-gray-100 p-2 sm:p-4 rounded-2xl flex-1 text-center min-w-[140px]">
                            <label class="text-sm font-medium text-gray-600">100+</label>
                            <div class="flex items-center justify-center space-x-3 mt-2">
                                <button data-stat="scores100" data-op="-1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">-</button>
                                <span id="stat-scores100" class="text-3xl font-bold">0</span>
                                <button data-stat="scores100" data-op="1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">+</button>
                            </div>
                        </div>
                        <div class="bg-gray-100 p-2 sm:p-4 rounded-2xl flex-1 text-center min-w-[140px]">
                            <label class="text-sm font-medium text-gray-600">140+</label>
                            <div class="flex items-center justify-center space-x-3 mt-2">
                                <button data-stat="scores140" data-op="-1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">-</button>
                                <span id="stat-scores140" class="text-3xl font-bold">0</span>
                                <button data-stat="scores140" data-op="1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">+</button>
                            </div>
                        </div>
                        <div class="bg-gray-100 p-2 sm:p-4 rounded-2xl flex-1 text-center min-w-[140px]">
                            <label class="text-sm font-medium text-gray-600">180s</label>
                            <div class="flex items-center justify-center space-x-3 mt-2">
                                <button data-stat="scores180" data-op="-1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">-</button>
                                <span id="stat-scores180" class="text-3xl font-bold">0</span>
                                <button data-stat="scores180" data-op="1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">+</button>
                            </div>
                        </div>
                        <div class="bg-gray-100 p-2 sm:p-4 rounded-2xl flex-1 text-center min-w-[140px]">
                            <label class="text-sm font-medium text-gray-600">?</label>
                            <div class="flex items-center justify-center space-x-3 mt-2">
                                <button data-stat="sillyThings" data-op="-1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">-</button>
                                <span id="stat-sillyThings" class="text-3xl font-bold">0</span>
                                <button data-stat="sillyThings" data-op="1" class="stat-btn w-10 h-10 rounded-full bg-gray-300 text-gray-700 text-xl font-bold">+</button>
                            </div>
                        </div>
                    </div>

                    <!-- Doubles Scoring -->
                    <div id="doubles-scoring-panel" class="hidden mb-6">
                        <div class="grid grid-cols-1 gap-4">
                            <!-- Player 1 -->
                            <div class="border border-gray-200 p-3 sm:p-4 rounded-2xl">
                                <h4 id="doubles-p1-name" class="text-lg font-semibold text-center mb-3"></h4>
                                <div class="flex flex-wrap justify-center gap-2">
                                    <div class="bg-gray-100 p-2 rounded-xl flex-1 text-center min-w-[120px]">
                                        <label class="text-xs font-medium text-gray-600">100+</label>
                                        <div class="flex items-center justify-center space-x-2 mt-1">
                                            <button data-stat="scores100" data-op="-1" data-player-index="0" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">-</button>
                                            <span id="stat-p1-scores100" class="text-2xl font-bold">0</span>
                                            <button data-stat="scores100" data-op="1" data-player-index="0" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">+</button>
                                        </div>
                                    </div>
                                    <div class="bg-gray-100 p-2 rounded-xl flex-1 text-center min-w-[120px]">
                                        <label class="text-xs font-medium text-gray-600">140+</label>
                                        <div class="flex items-center justify-center space-x-2 mt-1">
                                            <button data-stat="scores140" data-op="-1" data-player-index="0" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">-</button>
                                            <span id="stat-p1-scores140" class="text-2xl font-bold">0</span>
                                            <button data-stat="scores140" data-op="1" data-player-index="0" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">+</button>
                                        </div>
                                    </div>
                                    <div class="bg-gray-100 p-2 rounded-xl flex-1 text-center min-w-[120px]">
                                        <label class="text-xs font-medium text-gray-600">180s</label>
                                        <div class="flex items-center justify-center space-x-2 mt-1">
                                            <button data-stat="scores180" data-op="-1" data-player-index="0" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">-</button>
                                            <span id="stat-p1-scores180" class="text-2xl font-bold">0</span>
                                            <button data-stat="scores180" data-op="1" data-player-index="0" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">+</button>
                                        </div>
                                    </div>
                                    <div class="bg-gray-100 p-2 rounded-xl flex-1 text-center min-w-[120px]">
                                        <label class="text-xs font-medium text-gray-600">?</label>
                                        <div class="flex items-center justify-center space-x-2 mt-1">
                                            <button data-stat="sillyThings" data-op="-1" data-player-index="0" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">-</button>
                                            <span id="stat-p1-sillyThings" class="text-2xl font-bold">0</span>
                                            <button data-stat="sillyThings" data-op="1" data-player-index="0" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">+</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Player 2 -->
                            <div class="border border-gray-200 p-3 sm:p-4 rounded-2xl">
                                <h4 id="doubles-p2-name" class="text-lg font-semibold text-center mb-3"></h4>
                                <div class="flex flex-wrap justify-center gap-2">
                                    <div class="bg-gray-100 p-2 rounded-xl flex-1 text-center min-w-[120px]">
                                        <label class="text-xs font-medium text-gray-600">100+</label>
                                        <div class="flex items-center justify-center space-x-2 mt-1">
                                            <button data-stat="scores100" data-op="-1" data-player-index="1" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">-</button>
                                            <span id="stat-p2-scores100" class="text-2xl font-bold">0</span>
                                            <button data-stat="scores100" data-op="1" data-player-index="1" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">+</button>
                                        </div>
                                    </div>
                                    <div class="bg-gray-100 p-2 rounded-xl flex-1 text-center min-w-[120px]">
                                        <label class="text-xs font-medium text-gray-600">140+</label>
                                        <div class="flex items-center justify-center space-x-2 mt-1">
                                            <button data-stat="scores140" data-op="-1" data-player-index="1" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">-</button>
                                            <span id="stat-p2-scores140" class="text-2xl font-bold">0</span>
                                            <button data-stat="scores140" data-op="1" data-player-index="1" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">+</button>
                                        </div>
                                    </div>
                                    <div class="bg-gray-100 p-2 rounded-xl flex-1 text-center min-w-[120px]">
                                        <label class="text-xs font-medium text-gray-600">180s</label>
                                        <div class="flex items-center justify-center space-x-2 mt-1">
                                            <button data-stat="scores180" data-op="-1" data-player-index="1" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">-</button>
                                            <span id="stat-p2-scores180" class="text-2xl font-bold">0</span>
                                            <button data-stat="scores180" data-op="1" data-player-index="1" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">+</button>
                                        </div>
                                    </div>
                                    <div class="bg-gray-100 p-2 rounded-xl flex-1 text-center min-w-[120px]">
                                        <label class="text-xs font-medium text-gray-600">?</label>
                                        <div class="flex items-center justify-center space-x-2 mt-1">
                                            <button data-stat="sillyThings" data-op="-1" data-player-index="1" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">-</button>
                                            <span id="stat-p2-sillyThings" class="text-2xl font-bold">0</span>
                                            <button data-stat="sillyThings" data-op="1" data-player-index="1" class="stat-btn w-8 h-8 rounded-full bg-gray-300 text-gray-700 font-bold">+</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-6 max-w-xs mx-auto">
                        <label for="high-checkout-input" class="block text-sm font-medium text-gray-700 text-center">High Checkout (H/C)</label>
                        <input type="number" id="high-checkout-input" class="mt-1 block w-full text-center text-xl p-2 border border-gray-300 focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm rounded-xl">
                    </div>
                    <div id="fines-panel" class="mb-8 border-t pt-6">
                        <h4 class="text-lg font-semibold text-center mb-3">Game Incidents</h4>
                        <div class="flex justify-center flex-wrap gap-2">
                            <button id="fine-btn-26" class="bg-red-500 text-white py-2 px-3 rounded-xl hover:bg-red-600 transition-colors duration-200 text-sm">26 (26p)</button>
                            <button id="fine-btn-miss" class="bg-red-500 text-white py-2 px-3 rounded-xl hover:bg-red-600 transition-colors duration-200 text-sm">Miss Board (50p)</button>
                            <button id="fine-btn-low-score" class="bg-red-500 text-white py-2 px-3 rounded-xl hover:bg-red-600 transition-colors duration-200 text-sm">Score &lt; 10</button>
                        </div>
                        <p class="text-center text-gray-600 mt-4">Current Fines: <span id="stat-fines" class="font-bold">£0.00</span></p>
                    </div>
                    <div id="game-action-buttons" class="mt-6 border-t border-gray-200 pt-6">
                        <button id="finish-match-btn" class="w-full bg-emerald-600 text-white py-3 px-4 rounded-xl hover:bg-emerald-700 transition-colors duration-200 font-semibold text-lg hidden">Finish Game & Save Stats</button>
                    </div>
                </div>
            </div>
            <div id="no-fixture-message" class="hidden text-center text-gray-500 bg-white p-10 rounded-2xl shadow-sm border border-gray-200">
                <p>No active fixture. Please go to Match Setup to start a new one.</p>
            </div>
        </div>

        <!-- League Stats Tab -->
        <div id="tab-content-stats" class="hidden">
            <div class="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
                <div class="px-4 sm:px-6 py-4 flex flex-col sm:flex-row justify-between items-center gap-4">
                    <h2 class="text-xl font-semibold">Season Leaderboard</h2>
                    <select id="season-filter-select" class="w-full sm:w-auto px-3 py-2 border border-gray-300 rounded-xl focus:ring-emerald-500 focus:border-emerald-500"></select>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Player</th>
                                <th scope="col" class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">W</th>
                                <th scope="col" class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">L</th>
                                <th scope="col" class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">100+</th>
                                <th scope="col" class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">140+</th>
                                <th scope="col" class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">180s</th>
                                <th scope="col" class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">H/C</th>
                                <th scope="col" class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fines</th>
                            </tr>
                        </thead>
                        <tbody id="leaderboard-body" class="bg-white divide-y divide-gray-200"></tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Admin Tab -->
        <div id="tab-content-admin" class="hidden">
            <div class="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
                 <div class="p-4 sm:p-6">
                     <h2 class="text-xl sm:text-2xl font-bold text-gray-900">Admin Panel</h2>
                     <div id="admin-content-area" class="mt-4"></div>
                 </div>
            </div>
        </div>

    </div>

    <!-- Mobile Menu Overlay -->
    <div id="mobile-menu-overlay" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-40 hidden opacity-0 transition-opacity duration-300 ease-in-out">
        <div id="mobile-menu" class="fixed top-0 right-0 h-full w-64 bg-white shadow-lg p-6 transform translate-x-full transition-transform duration-300 ease-in-out">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-bold">Menu</h2>
                <button id="close-menu-btn" class="p-2">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <nav id="mobile-nav-links" class="flex flex-col space-y-4">
                <!-- Links will be dynamically inserted here by JS -->
            </nav>
        </div>
    </div>


    <!-- Modals -->
    <div id="player-card-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden items-center justify-center z-50 modal-overlay p-4">
        <div class="bg-white rounded-2xl shadow-xl p-4 sm:p-6 w-full max-w-lg relative">
             <button id="player-card-close-btn" class="absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-500 hover:text-gray-800 text-3xl leading-none">&times;</button>
             <div id="player-card-content"></div>
        </div>
    </div>

    <div id="low-score-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden items-center justify-center z-50 modal-overlay p-4">
        <div class="bg-white rounded-2xl shadow-xl p-6 w-full max-w-sm">
            <h3 class="text-xl font-semibold mb-4">Enter Score (&lt;10)</h3>
            <input type="number" id="low-score-input" min="1" max="9" class="w-full px-3 py-2 border border-gray-300 rounded-xl text-center text-lg" placeholder="1-9">
            <div class="flex justify-end space-x-3 mt-4">
                <button id="low-score-cancel" class="bg-gray-200 text-gray-800 py-2 px-4 rounded-xl">Cancel</button>
                <button id="low-score-submit" class="bg-emerald-600 text-white py-2 px-4 rounded-xl">Add Fine</button>
            </div>
        </div>
    </div>

    <div id="dotd-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden items-center justify-center z-50 modal-overlay p-4">
        <div class="bg-white rounded-2xl shadow-xl p-6 w-full max-w-md">
            <h3 class="text-2xl font-bold text-center mb-4">Vote for DOTD</h3>
            <p class="text-center text-gray-600 mb-6">The player with the most votes receives a £2.50 fine.</p>
            <div id="dotd-vote-list" class="space-y-3 mb-6"></div>
            <button id="dotd-finish-btn" class="w-full bg-emerald-600 text-white py-3 px-4 rounded-xl font-semibold">Confirm Winner & Finish Match</button>
        </div>
    </div>

    <div id="confirm-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden items-center justify-center z-50 modal-overlay p-4">
        <div class="bg-white rounded-2xl shadow-xl p-6 w-full max-w-sm">
            <h3 id="confirm-modal-title" class="text-xl font-semibold mb-2">Are you sure?</h3>
            <p id="confirm-modal-text" class="text-gray-600 mb-4">This action cannot be undone.</p>
            <div class="flex justify-end space-x-3 mt-4">
                <button id="confirm-modal-cancel" class="bg-gray-200 text-gray-800 py-2 px-4 rounded-xl">Cancel</button>
                <button id="confirm-modal-confirm" class="bg-red-600 text-white py-2 px-4 rounded-xl">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast-notification" class="fixed top-5 right-5 bg-emerald-500 text-white py-3 px-5 rounded-xl shadow-lg transform translate-x-[150%]" role="alert">
        <span id="toast-message"></span>
    </div>

    <script type="module">
        // --- Firebase SDK Imports ---
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, addDoc, doc, deleteDoc, runTransaction, query, updateDoc, serverTimestamp, increment, setLogLevel, writeBatch } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- APPLICATION STATE ---
        const state = {
            db: null,
            auth: null,
            userId: null,
            isLoggedIn: false,
            activeTab: 'match',
            players: [],
            seasons: [],
            activeSeasonId: null,
            selectedStatsSeasonId: 'all-time',
            playerCard: { isOpen: false, playerId: null, selectedSeasonId: 'all-time' },
            fixture: { id: null, games: [] },
            previousFixtures: [],
            selectedPreviousFixtureId: null,
            currentGameIndex: 0,
            confirmation: { action: null, data: null },
        };

        // --- CONSTANTS ---
        const PASSWORD = 'burnaby';
        const GAME_TITLES = ["Singles 1", "Singles 2", "Singles 3", "Singles 4", "Singles 5", "Doubles 1", "Doubles 2"];
        const PLAYERS_COLLECTION = 'players';
        const FIXTURES_COLLECTION = 'fixtures';
        const SEASONS_COLLECTION = 'seasons';

        // --- DOM ELEMENTS ---
        const ui = {
            tabs: { match: document.getElementById('tab-btn-match'), live: document.getElementById('tab-btn-live'), previous: document.getElementById('tab-btn-previous'), fines: document.getElementById('tab-btn-fines'), stats: document.getElementById('tab-btn-stats'), setup: document.getElementById('tab-btn-setup'), admin: document.getElementById('tab-btn-admin') },
            content: { match: document.getElementById('tab-content-match'), live: document.getElementById('tab-content-live'), previous: document.getElementById('tab-content-previous'), fines: document.getElementById('tab-content-fines'), stats: document.getElementById('tab-content-stats'), setup: document.getElementById('tab-content-setup'), admin: document.getElementById('tab-content-admin') },
            toast: { element: document.getElementById('toast-notification'), message: document.getElementById('toast-message') },
            hamburgerBtn: document.getElementById('hamburger-btn'),
            desktopNav: document.getElementById('desktop-nav'),
            mobileMenuOverlay: document.getElementById('mobile-menu-overlay'),
            mobileNavLinks: document.getElementById('mobile-nav-links'),
            closeMenuBtn: document.getElementById('close-menu-btn'),
            adminContentArea: document.getElementById('admin-content-area'),
            connectionStatus: document.getElementById('connection-status'),
            playerRoster: document.getElementById('player-roster-list'),
            newPlayerInput: document.getElementById('new-player-name-input'),
            addPlayerBtn: document.getElementById('add-player-btn'),
            oppositionNameInput: document.getElementById('opposition-name-input'),
            fixtureForm: document.getElementById('fixture-setup-form'),
            createFixtureBtn: document.getElementById('create-fixture-btn'),
            seasonsList: document.getElementById('seasons-list'),
            newSeasonInput: document.getElementById('new-season-name-input'),
            addSeasonBtn: document.getElementById('add-season-btn'),
            activeSeasonDisplay: document.getElementById('active-season-display'),
            seasonFilterSelect: document.getElementById('season-filter-select'),
            liveMatchContent: document.getElementById('live-match-content'),
            noFixtureMessage: document.getElementById('no-fixture-message'),
            gameNavTitle: document.getElementById('game-nav-title'),
            prevGameBtn: document.getElementById('prev-game-btn'),
            nextGameBtn: document.getElementById('next-game-btn'),
            currentPlayerNames: document.getElementById('current-player-names'),
            statValueSpans: {
                legsWon: document.getElementById('stat-legsWon'),
                legsLost: document.getElementById('stat-legsLost'),
                fines: document.getElementById('stat-fines'),
                scores100: document.getElementById('stat-scores100'),
                scores140: document.getElementById('stat-scores140'),
                scores180: document.getElementById('stat-scores180'),
                sillyThings: document.getElementById('stat-sillyThings'),
                p1_scores100: document.getElementById('stat-p1-scores100'),
                p1_scores140: document.getElementById('stat-p1-scores140'),
                p1_scores180: document.getElementById('stat-p1-scores180'),
                p1_sillyThings: document.getElementById('stat-p1-sillyThings'),
                p2_scores100: document.getElementById('stat-p2-scores100'),
                p2_scores140: document.getElementById('stat-p2-scores140'),
                p2_scores180: document.getElementById('stat-p2-scores180'),
                p2_sillyThings: document.getElementById('stat-p2-sillyThings'),
            },
            doublesPlayerNames: { p1: document.getElementById('doubles-p1-name'), p2: document.getElementById('doubles-p2-name') },
            highCheckoutInput: document.getElementById('high-checkout-input'),
            finesPanel: document.getElementById('fines-panel'),
            gameActionButtons: document.getElementById('game-action-buttons'),
            leaderboardBody: document.getElementById('leaderboard-body'),
            currentMatchResults: document.getElementById('current-match-results'),
            currentMatchOpponent: document.getElementById('current-match-opponent'),
            currentMatchScoreContainer: document.getElementById('current-match-score-container'),
            liveScoringScoreContainer: document.getElementById('live-scoring-score-container'),
            previousMatchesList: document.getElementById('previous-matches-list'),
            previousMatchDetails: document.getElementById('previous-match-details'),
            finesList: document.getElementById('fines-list'),
            payFineContainer: document.getElementById('pay-fine-container'),
            singlesScoringPanel: document.getElementById('singles-scoring-panel'),
            doublesScoringPanel: document.getElementById('doubles-scoring-panel'),
            playerCardModal: { overlay: document.getElementById('player-card-modal'), content: document.getElementById('player-card-content'), closeBtn: document.getElementById('player-card-close-btn') },
            lowScoreModal: { overlay: document.getElementById('low-score-modal'), input: document.getElementById('low-score-input'), cancel: document.getElementById('low-score-cancel'), submit: document.getElementById('low-score-submit') },
            dotdModal: { overlay: document.getElementById('dotd-modal'), list: document.getElementById('dotd-vote-list'), finish: document.getElementById('dotd-finish-btn') },
            confirmModal: { overlay: document.getElementById('confirm-modal'), title: document.getElementById('confirm-modal-title'), text: document.getElementById('confirm-modal-text'), cancel: document.getElementById('confirm-modal-cancel'), confirm: document.getElementById('confirm-modal-confirm') },
            fineBtn26: document.getElementById('fine-btn-26'),
            fineBtnMiss: document.getElementById('fine-btn-miss'),
            fineBtnLowScore: document.getElementById('fine-btn-low-score'),
        };

        // --- RENDER FUNCTIONS ---
        function render() {
            renderAuth();
            renderTabs();
            renderPlayerRoster();
            renderSeasonManagement();
            renderFixtureSetup();
            renderLiveMatch();
            renderLeaderboard();
            renderCurrentMatch();
            renderPreviousMatches();
            renderFines();
            renderPlayerCard();
        }

        function renderAuth() {
            ui.adminContentArea.innerHTML = '';
            if (state.isLoggedIn) {
                const loggedInContainer = document.createElement('div');
                loggedInContainer.className = 'space-y-4 max-w-sm';
                loggedInContainer.innerHTML = `<p class="text-gray-600">You are logged in as an admin. You can now manage players, seasons, and fines.</p>`;
                
                const logoutBtn = document.createElement('button');
                logoutBtn.id = 'logout-btn';
                logoutBtn.textContent = 'Logout';
                logoutBtn.className = 'w-full bg-red-500 text-white py-2 px-4 rounded-xl hover:bg-red-600 transition-colors duration-200 font-medium';
                logoutBtn.addEventListener('click', handleLogout);
                
                loggedInContainer.appendChild(logoutBtn);
                ui.adminContentArea.appendChild(loggedInContainer);

            } else {
                const loginContainer = document.createElement('div');
                loginContainer.className = 'space-y-3 max-w-sm';
                loginContainer.innerHTML = `
                    <p class="text-gray-600">Enter the admin password to manage players, seasons, and mark fines as paid.</p>
                    <input type="password" id="password-input" class="w-full px-3 py-2 border border-gray-300 rounded-xl text-center text-lg" placeholder="Password">
                `;
                const loginBtn = document.createElement('button');
                loginBtn.id = 'login-btn-tab';
                loginBtn.textContent = 'Login';
                loginBtn.className = 'w-full bg-emerald-600 text-white py-2 px-4 rounded-xl hover:bg-emerald-700 transition-colors duration-200';
                
                loginBtn.addEventListener('click', handleLogin);
                loginContainer.querySelector('#password-input').addEventListener('keydown', (e) => { if (e.key === 'Enter') handleLogin(); });

                loginContainer.appendChild(loginBtn);
                ui.adminContentArea.appendChild(loginContainer);
            }
        }

        function renderTabs() {
            ui.mobileNavLinks.innerHTML = ''; // Clear previous links
            for (const tabKey in ui.tabs) {
                const tabButton = ui.tabs[tabKey];
                const contentPanel = ui.content[tabKey];

                // Handle desktop tabs
                if (tabButton) {
                    if (tabKey === state.activeTab) {
                        tabButton.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
                        tabButton.classList.add('border-emerald-500', 'text-emerald-600');
                    } else {
                        tabButton.classList.remove('border-emerald-500', 'text-emerald-600');
                        tabButton.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
                    }
                }
                
                // Handle content panels
                if (contentPanel) {
                    if (tabKey === state.activeTab) {
                        contentPanel.classList.remove('hidden');
                    } else {
                        contentPanel.classList.add('hidden');
                    }
                }

                // Populate mobile menu
                const mobileLink = document.createElement('a');
                mobileLink.href = '#';
                mobileLink.dataset.tabName = tabKey;
                mobileLink.textContent = tabButton.textContent;
                mobileLink.className = `text-lg p-2 rounded-md ${tabKey === state.activeTab ? 'bg-emerald-100 text-emerald-700 font-semibold' : 'text-gray-700 hover:bg-gray-100'}`;
                ui.mobileNavLinks.appendChild(mobileLink);
            }
        }

        function renderPlayerRoster() {
            ui.playerRoster.innerHTML = '';
            if (state.players.length === 0) {
                ui.playerRoster.innerHTML = `<p class="text-gray-500">No players added yet.</p>`;
                return;
            }
            state.players.forEach(player => {
                const playerEl = document.createElement('div');
                playerEl.className = 'flex items-center justify-between bg-gray-100 p-2 rounded-lg';
                playerEl.innerHTML = `
                    <span class="font-medium">${player.name}</span>
                    ${state.isLoggedIn ? `<button data-player-id="${player.id}" class="delete-player-btn text-red-500 hover:text-red-700 text-sm font-semibold">Remove</button>` : ''}
                `;
                ui.playerRoster.appendChild(playerEl);
            });
        }

        function renderSeasonManagement() {
            ui.seasonsList.innerHTML = '';
            if (state.seasons.length === 0) {
                ui.seasonsList.innerHTML = `<p class="text-gray-500">No seasons created yet.</p>`;
                ui.activeSeasonDisplay.textContent = 'N/A - Please create a season.';
                return;
            }
            state.seasons.forEach(season => {
                const isActive = season.id === state.activeSeasonId;
                const seasonEl = document.createElement('div');
                seasonEl.className = `flex items-center justify-between p-2 rounded-lg ${isActive ? 'bg-emerald-100' : 'bg-gray-100'}`;
                seasonEl.innerHTML = `
                    <span class="font-medium">${season.name}</span>
                    ${!isActive && state.isLoggedIn ? `<button data-season-id="${season.id}" class="set-active-season-btn text-emerald-600 hover:text-emerald-800 text-sm font-semibold">Set Active</button>` : ''}
                `;
                ui.seasonsList.appendChild(seasonEl);

                if (isActive) {
                    ui.activeSeasonDisplay.textContent = season.name;
                }
            });
        }

        function renderFixtureSetup() {
            ui.fixtureForm.innerHTML = '';
            GAME_TITLES.forEach((title, index) => {
                const isDoubles = title.includes("Doubles");
                let options = state.players.map(p => `<option value="${p.id}">${p.name}</option>`).join('');

                const gameSetupEl = document.createElement('div');
                gameSetupEl.className = 'p-4 border border-gray-200 rounded-xl';
                gameSetupEl.innerHTML = `
                    <h4 class="font-semibold mb-2">${title}</h4>
                    <div class="grid grid-cols-1 ${isDoubles ? 'sm:grid-cols-2' : ''} gap-2">
                        <select id="game-${index}-p1" class="w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-emerald-500 focus:border-emerald-500">
                            <option value="">Select Player 1</option>
                            ${options}
                        </select>
                        ${isDoubles ? `
                        <select id="game-${index}-p2" class="w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-emerald-500 focus:border-emerald-500">
                            <option value="">Select Player 2</option>
                            ${options}
                        </select>
                        ` : ''}
                    </div>
                `;
                ui.fixtureForm.appendChild(gameSetupEl);
            });
        }

        function getPlayerStats(player, seasonId) {
            const defaultStats = { legsWon: 0, legsLost: 0, scores100: 0, scores140: 0, scores180: 0, highCheckout: 0, fines: 0 };
            if (!player || !player.stats) return defaultStats;

            if (seasonId === 'all-time') {
                return Object.values(player.stats).reduce((acc, seasonStats) => {
                    Object.keys(acc).forEach(key => {
                        if (key === 'highCheckout') {
                            acc[key] = Math.max(acc[key], seasonStats[key] || 0);
                        } else {
                            acc[key] += seasonStats[key] || 0;
                        }
                    });
                    return acc;
                }, { ...defaultStats });
            }
            return player.stats?.[seasonId] || defaultStats;
        }

        function renderLeaderboard() {
            // Render filter dropdown
            ui.seasonFilterSelect.innerHTML = `<option value="all-time">All-Time</option>`;
            state.seasons.forEach(s => {
                ui.seasonFilterSelect.innerHTML += `<option value="${s.id}">${s.name}</option>`;
            });
            ui.seasonFilterSelect.value = state.selectedStatsSeasonId;

            // Render table body
            ui.leaderboardBody.innerHTML = '';
            const playersWithStats = state.players.map(p => ({
                ...p,
                displayStats: getPlayerStats(p, state.selectedStatsSeasonId)
            }));

            playersWithStats.sort((a,b) => b.displayStats.legsWon - a.displayStats.legsWon);

            playersWithStats.forEach(player => {
                const tr = document.createElement('tr');
                tr.className = 'cursor-pointer hover:bg-gray-50';
                tr.dataset.playerId = player.id;
                tr.innerHTML = `
                    <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${player.name}</td>
                    <td class="px-2 py-4 whitespace-nowrap text-sm text-gray-500 text-center">${player.displayStats.legsWon}</td>
                    <td class="px-2 py-4 whitespace-nowrap text-sm text-gray-500 text-center">${player.displayStats.legsLost}</td>
                    <td class="px-2 py-4 whitespace-nowrap text-sm text-gray-500 text-center">${player.displayStats.scores100}</td>
                    <td class="px-2 py-4 whitespace-nowrap text-sm text-gray-500 text-center">${player.displayStats.scores140}</td>
                    <td class="px-2 py-4 whitespace-nowrap text-sm text-gray-500 text-center">${player.displayStats.scores180}</td>
                    <td class="px-2 py-4 whitespace-nowrap text-sm text-gray-500 text-center">${player.displayStats.highCheckout}</td>
                    <td class="px-2 py-4 whitespace-nowrap text-sm text-gray-500 text-center">£${((player.displayStats.fines) / 100).toFixed(2)}</td>
                `;
                ui.leaderboardBody.appendChild(tr);
            });
        }

        function renderOverallScore(container) {
            container.innerHTML = '';
            if (!state.fixture.id) return;

            let burnabyScore = 0;
            let oppositionScore = 0;
            state.fixture.games.forEach(game => {
                burnabyScore += game.legsWon || 0;
                oppositionScore += game.legsLost || 0;
            });
            
            const scoreEl = document.createElement('div');
            scoreEl.className = 'p-4 bg-emerald-600 text-white rounded-xl';
            scoreEl.innerHTML = `<h3 class="text-xl sm:text-2xl font-bold text-center">Overall Score: ${burnabyScore} - ${oppositionScore}</h3>`;
            container.appendChild(scoreEl);
        }

        function renderCurrentMatch() {
            if (!state.fixture.id) {
                ui.currentMatchResults.innerHTML = '<p class="text-gray-500">No active match.</p>';
                ui.currentMatchOpponent.textContent = 'Live results as they come in.';
                ui.currentMatchScoreContainer.innerHTML = '';
                return;
            }
            ui.currentMatchOpponent.textContent = `vs ${state.fixture.oppositionName}`;
            ui.currentMatchResults.innerHTML = '';

            renderOverallScore(ui.currentMatchScoreContainer);

            state.fixture.games.forEach((game, index) => {
                const gameEl = document.createElement('div');
                gameEl.className = `p-4 rounded-xl ${state.currentGameIndex === index ? 'bg-emerald-50' : 'bg-gray-50'}`;
                const playerNames = game.playerIds.map(id => state.players.find(p => p.id === id)?.name || 'Unknown').join(' & ');
                gameEl.innerHTML = `
                    <div class="flex justify-between items-center">
                        <div>
                            <p class="font-bold">${game.title}</p>
                            <p class="text-sm text-gray-600">${playerNames}</p>
                        </div>
                        <p class="text-xl font-bold">${game.legsWon || 0} - ${game.legsLost || 0}</p>
                    </div>
                `;
                ui.currentMatchResults.appendChild(gameEl);
            });
        }

        function renderPreviousMatches() {
            ui.previousMatchesList.innerHTML = '';
            if (state.previousFixtures.length === 0) {
                ui.previousMatchesList.innerHTML = '<p class="text-gray-500">No finished matches.</p>';
                ui.previousMatchDetails.innerHTML = '<p class="text-gray-500">Select a match to see the details.</p>';
                return;
            }
            state.previousFixtures.forEach(fixture => {
                const item = document.createElement('button');
                item.className = `w-full text-left p-3 rounded-lg transition-colors duration-200 ${state.selectedPreviousFixtureId === fixture.id ? 'bg-emerald-100' : 'hover:bg-gray-100'}`;
                item.dataset.fixtureId = fixture.id;
                const dateStr = fixture.createdAt?.toDate ? fixture.createdAt.toDate().toLocaleDateString() : 'Date unknown';
                item.innerHTML = `
                    <p class="font-semibold">vs ${fixture.oppositionName}</p>
                    <p class="text-sm text-gray-500">${dateStr}</p>
                `;
                ui.previousMatchesList.appendChild(item);
            });

            const selectedFixture = state.previousFixtures.find(f => f.id === state.selectedPreviousFixtureId);
            if (selectedFixture) {
                ui.previousMatchDetails.innerHTML = '';
                 let burnabyScore = 0;
                 let oppositionScore = 0;
                 selectedFixture.games.forEach(game => {
                     burnabyScore += game.legsWon;
                     oppositionScore += game.legsLost;
                 });
                ui.previousMatchDetails.innerHTML += `<h3 class="text-xl font-bold mb-4">vs ${selectedFixture.oppositionName} (${burnabyScore}-${oppositionScore})</h3>`;
                selectedFixture.games.forEach(game => {
                     const playerNames = game.playerIds.map(id => state.players.find(p => p.id === id)?.name || 'Unknown').join(' & ');
                     ui.previousMatchDetails.innerHTML += `
                         <div class="p-3 bg-gray-50 rounded-lg mb-2">
                             <div class="flex justify-between items-center">
                                 <div><p class="font-semibold">${game.title}</p><p class="text-sm text-gray-500">${playerNames}</p></div>
                                 <p class="font-bold">${game.legsWon} - ${game.legsLost}</p>
                             </div>
                         </div>
                     `;
                });
            } else {
                ui.previousMatchDetails.innerHTML = '<p class="text-gray-500">Select a match to see the details.</p>';
            }
        }

        function renderFines() {
            ui.finesList.innerHTML = '';
            let totalFines = 0;
            const playersWithFines = state.players.map(p => {
                const allTimeStats = getPlayerStats(p, 'all-time');
                return { ...p, totalFines: allTimeStats.fines };
            }).filter(p => p.totalFines > 0);

            playersWithFines.forEach(player => {
                totalFines += player.totalFines;
                const fineEl = document.createElement('div');
                fineEl.className = 'p-4 flex items-center justify-between';
                fineEl.innerHTML = `
                    <div>
                        <p class="font-semibold">${player.name}</p>
                        <p class="text-lg font-bold text-red-600">£${(player.totalFines / 100).toFixed(2)}</p>
                    </div>
                    ${state.isLoggedIn ? `<button data-player-id="${player.id}" class="pay-fines-btn bg-emerald-600 text-white py-2 px-4 rounded-xl hover:bg-emerald-700">Mark as Paid</button>` : ''}
                `;
                ui.finesList.appendChild(fineEl);
            });

            if (totalFines === 0) {
                ui.finesList.innerHTML = '<p class="p-4 text-gray-500">No outstanding fines. Good lads.</p>';
                ui.payFineContainer.classList.add('hidden');
            } else {
                ui.payFineContainer.classList.remove('hidden');
            }
        }

        function renderLiveMatch() {
            if (!state.fixture.id || !state.fixture.games || state.fixture.games.length === 0) {
                ui.liveMatchContent.classList.add('hidden');
                ui.noFixtureMessage.classList.remove('hidden');
                return;
            }
            ui.liveMatchContent.classList.remove('hidden');
            ui.noFixtureMessage.classList.add('hidden');

            renderOverallScore(ui.liveScoringScoreContainer);

            const game = state.fixture.games[state.currentGameIndex];
            if (!game) {
                console.error("Could not find game data for the current index.");
                return;
            }

            const isDoubles = game.playerIds.length > 1;
            ui.singlesScoringPanel.classList.toggle('hidden', isDoubles);
            ui.doublesScoringPanel.classList.toggle('hidden', !isDoubles);
            ui.finesPanel.classList.toggle('hidden', isDoubles);

            const playerNames = game.playerIds.map(id => state.players.find(p => p.id === id)?.name || 'Unknown');
            ui.currentPlayerNames.textContent = playerNames.join(' & ');
            ui.gameNavTitle.textContent = game.title;

            if(isDoubles) {
                ui.doublesPlayerNames.p1.textContent = playerNames[0];
                ui.doublesPlayerNames.p2.textContent = playerNames[1];
            }

            ui.statValueSpans.legsWon.textContent = game.legsWon || 0;
            ui.statValueSpans.legsLost.textContent = game.legsLost || 0;
            ui.statValueSpans.fines.textContent = `£${((game.fines || 0) / 100).toFixed(2)}`;
            ui.highCheckoutInput.value = game.highCheckout || '';

            const p1Scores = game.playerScores?.[0] || {};
            const p2Scores = game.playerScores?.[1] || {};

            if (isDoubles) {
                ui.statValueSpans.p1_scores100.textContent = p1Scores.scores100 || 0;
                ui.statValueSpans.p1_scores140.textContent = p1Scores.scores140 || 0;
                ui.statValueSpans.p1_scores180.textContent = p1Scores.scores180 || 0;
                ui.statValueSpans.p1_sillyThings.textContent = p1Scores.sillyThings || 0;
                ui.statValueSpans.p2_scores100.textContent = p2Scores.scores100 || 0;
                ui.statValueSpans.p2_scores140.textContent = p2Scores.scores140 || 0;
                ui.statValueSpans.p2_scores180.textContent = p2Scores.scores180 || 0;
                ui.statValueSpans.p2_sillyThings.textContent = p2Scores.sillyThings || 0;
            } else {
                ui.statValueSpans.scores100.textContent = p1Scores.scores100 || 0;
                ui.statValueSpans.scores140.textContent = p1Scores.scores140 || 0;
                ui.statValueSpans.scores180.textContent = p1Scores.scores180 || 0;
                ui.statValueSpans.sillyThings.textContent = p1Scores.sillyThings || 0;
            }

            ui.prevGameBtn.disabled = state.currentGameIndex === 0;
            ui.nextGameBtn.disabled = state.currentGameIndex === state.fixture.games.length - 1;

            const isFinalGame = state.fixture.games && state.fixture.games.length > 0 && state.currentGameIndex === state.fixture.games.length - 1;
            const finishMatchBtn = document.getElementById('finish-match-btn');
            
            if (isFinalGame && state.isLoggedIn) {
                finishMatchBtn.classList.remove('hidden');
            } else {
                finishMatchBtn.classList.add('hidden');
            }
        }

        function renderPlayerCard() {
            if (!state.playerCard.isOpen) {
                ui.playerCardModal.overlay.classList.add('hidden');
                ui.playerCardModal.overlay.classList.remove('flex');
                return;
            }

            const player = state.players.find(p => p.id === state.playerCard.playerId);
            if (!player) return;
            
            const stats = getPlayerStats(player, state.playerCard.selectedSeasonId);

            let optionsHtml = `<option value="all-time">All-Time</option>`;
            state.seasons.forEach(s => {
                optionsHtml += `<option value="${s.id}" ${s.id === state.playerCard.selectedSeasonId ? 'selected' : ''}>${s.name}</option>`;
            });

            ui.playerCardModal.content.innerHTML = `
                <div class="flex flex-col sm:flex-row justify-between items-start gap-4">
                    <h3 class="text-2xl font-bold">${player.name}'s Stats</h3>
                    <select id="player-card-season-select" class="w-full sm:w-auto px-3 py-2 border border-gray-300 rounded-xl">
                        ${optionsHtml}
                    </select>
                </div>
                <div class="grid grid-cols-2 gap-2 sm:gap-4 mt-4">
                    <div class="bg-gray-100 p-3 sm:p-4 rounded-xl text-center"><p class="text-sm text-gray-600">Wins</p><p class="text-2xl sm:text-3xl font-bold">${stats.legsWon}</p></div>
                    <div class="bg-gray-100 p-3 sm:p-4 rounded-xl text-center"><p class="text-sm text-gray-600">Losses</p><p class="text-2xl sm:text-3xl font-bold">${stats.legsLost}</p></div>
                    <div class="bg-gray-100 p-3 sm:p-4 rounded-xl text-center"><p class="text-sm text-gray-600">100+</p><p class="text-2xl sm:text-3xl font-bold">${stats.scores100}</p></div>
                    <div class="bg-gray-100 p-3 sm:p-4 rounded-xl text-center"><p class="text-sm text-gray-600">140+</p><p class="text-2xl sm:text-3xl font-bold">${stats.scores140}</p></div>
                    <div class="bg-gray-100 p-3 sm:p-4 rounded-xl text-center"><p class="text-sm text-gray-600">180s</p><p class="text-2xl sm:text-3xl font-bold">${stats.scores180}</p></div>
                    <div class="bg-gray-100 p-3 sm:p-4 rounded-xl text-center"><p class="text-sm text-gray-600">High Checkout</p><p class="text-2xl sm:text-3xl font-bold">${stats.highCheckout}</p></div>
                    <div class="bg-gray-100 p-3 sm:p-4 rounded-xl text-center col-span-2"><p class="text-sm text-gray-600">Total Fines</p><p class="text-2xl sm:text-3xl font-bold text-red-600">£${(stats.fines / 100).toFixed(2)}</p></div>
                </div>
            `;
            
            ui.playerCardModal.overlay.classList.remove('hidden');
            ui.playerCardModal.overlay.classList.add('flex');
        }

        // --- UI Feedback ---
        function showToast(message, isError = false) {
            ui.toast.message.textContent = message;
            ui.toast.element.className = `fixed top-5 right-5 text-white py-3 px-5 rounded-xl shadow-lg transform transition-transform duration-500 ${isError ? 'bg-red-500' : 'bg-emerald-500'}`;
            
            // Show toast
            ui.toast.element.classList.remove('translate-x-[150%]');

            setTimeout(() => {
                ui.toast.element.classList.add('translate-x-[150%]');
            }, 3000);
        }

        // --- MODAL LOGIC & AUTH ---
        function handleLogin() {
            const passwordInput = document.getElementById('password-input');
            if (passwordInput.value === PASSWORD) {
                state.isLoggedIn = true;
                showToast('Login successful!');
                render();
            } else {
                showToast('Incorrect password.', true);
            }
        }
        
        function handleLogout() {
            state.isLoggedIn = false;
            showToast('You have been logged out.');
            render();
        }

        function openConfirmModal(title, text, action, data) {
            state.confirmation = { action, data };
            ui.confirmModal.title.textContent = title;
            ui.confirmModal.text.textContent = text;
            ui.confirmModal.overlay.classList.remove('hidden');
            ui.confirmModal.overlay.classList.add('flex');
        }

        function closeConfirmModal() {
            state.confirmation = { action: null, data: null };
            ui.confirmModal.overlay.classList.add('hidden');
            ui.confirmModal.overlay.classList.remove('flex');
        }

        async function handleConfirmation() {
            if (state.confirmation.action === 'deletePlayer') {
                try {
                    await deleteDoc(doc(state.db, PLAYERS_COLLECTION, state.confirmation.data));
                    showToast("Player removed.");
                } catch (error) {
                    console.error("Error deleting player: ", error);
                    showToast("Could not remove player.", true);
                }
            }
            closeConfirmModal();
        }

        // --- EVENT HANDLERS & LOGIC ---
        function openMobileMenu() {
            ui.mobileMenuOverlay.classList.remove('hidden');
            setTimeout(() => {
                ui.mobileMenuOverlay.classList.remove('opacity-0');
                ui.mobileMenuOverlay.querySelector('#mobile-menu').classList.remove('translate-x-full');
            }, 10);
        }

        function closeMobileMenu() {
            ui.mobileMenuOverlay.classList.add('opacity-0');
            ui.mobileMenuOverlay.querySelector('#mobile-menu').classList.add('translate-x-full');
            setTimeout(() => {
                ui.mobileMenuOverlay.classList.add('hidden');
            }, 300); // Match transition duration
        }

        function switchTab(tabName) {
            state.activeTab = tabName;
            render();
            closeMobileMenu(); // Close menu after selection
        }
        async function addPlayer() {
            const name = ui.newPlayerInput.value.trim();
            if (!name) {
                showToast("Player name cannot be empty.", true);
                return;
            }
            try {
                await addDoc(collection(state.db, PLAYERS_COLLECTION), {
                    name: name,
                    stats: {} // Initialize with empty stats object
                });
                showToast(`${name} added to the roster.`);
                ui.newPlayerInput.value = '';
            } catch (error) {
                console.error("Error adding player: ", error);
                showToast("Could not add player.", true);
            }
        }
        function deletePlayer(playerId) {
            const player = state.players.find(p => p.id === playerId);
            openConfirmModal(
                `Remove ${player?.name || 'Player'}?`,
                'This will permanently remove the player from the roster. This action cannot be undone.',
                'deletePlayer',
                playerId
            );
        }
        
        async function createFixture() {
            if (!state.isLoggedIn) {
                showToast("You must be logged in as an admin to create a match.", true);
                switchTab('admin');
                return;
            }
            if (!state.activeSeasonId) {
                showToast("Please set an active season before creating a match.", true);
                return;
            }
            const oppositionName = ui.oppositionNameInput.value.trim();
            if(!oppositionName) {
                showToast("Please enter an opposition name.", true);
                return;
            }

            const games = [];
            for (let i = 0; i < GAME_TITLES.length; i++) {
                const title = GAME_TITLES[i];
                const isDoubles = title.includes("Doubles");
                const p1 = document.getElementById(`game-${i}-p1`).value;
                
                const playerIds = [p1];
                if (isDoubles) {
                    const p2 = document.getElementById(`game-${i}-p2`).value;
                    if (p1 && p2 && p1 === p2) {
                        showToast(`A player cannot play with themselves in ${title}.`, true);
                        return;
                    }
                    if (p2) playerIds.push(p2);
                }
                
                if (playerIds.some(id => !id)) {
                    showToast(`Please select players for ${title}.`, true);
                    return;
                }

                const playerScores = playerIds.map(() => ({
                    scores100: 0,
                    scores140: 0,
                    scores180: 0,
                    sillyThings: 0,
                }));

                games.push({
                    title: title,
                    playerIds: playerIds,
                    legsWon: 0,
                    legsLost: 0,
                    highCheckout: 0,
                    fines: 0,
                    playerScores: playerScores
                });
            }

            try {
                await addDoc(collection(state.db, FIXTURES_COLLECTION), {
                    seasonId: state.activeSeasonId,
                    oppositionName: oppositionName,
                    games: games,
                    status: 'live',
                    createdAt: serverTimestamp()
                });
                showToast("Fixture created! Let's play darts!");
                switchTab('live');
            } catch (error) {
                console.error("Error creating fixture: ", error);
                showToast("Could not create the fixture.", true);
            }
        }

        async function updateGameData() {
            if (!state.fixture.id) return;
            const fixtureRef = doc(state.db, FIXTURES_COLLECTION, state.fixture.id);
            try {
                await updateDoc(fixtureRef, {
                    games: state.fixture.games
                });
            } catch (error) {
                console.error("Error updating game data:", error);
                showToast("Could not save latest score, check connection.", true);
            }
        }

        function updateStat(stat, value, playerIndex = 0) {
            const game = state.fixture.games[state.currentGameIndex];
            if (!game) return;

            if (!game.playerScores) game.playerScores = [{}, {}];

            if(stat.startsWith('scores') || stat === 'sillyThings') {
                const playerScores = game.playerScores[playerIndex] || {};
                playerScores[stat] = Math.max(0, (playerScores[stat] || 0) + value);
                game.playerScores[playerIndex] = playerScores;
            } else {
                 game[stat] = Math.max(0, (game[stat] || 0) + value);
            }
            render();
            updateGameData();
        }

        function addFine(amount, reason) {
            const game = state.fixture.games[state.currentGameIndex];
            if (!game) return;
            game.fines = (game.fines || 0) + amount;
            showToast(`Fine added: ${reason} (+£${(amount/100).toFixed(2)})`);
            render();
            updateGameData();
        }

        async function finishMatch(dotdPlayerId) {
            const fixtureRef = doc(state.db, FIXTURES_COLLECTION, state.fixture.id);
            const seasonId = state.fixture.seasonId;
            
            try {
                await runTransaction(state.db, async (transaction) => {
                    const playerRefs = {}; 
                    const allPlayerIds = new Set();
                    state.fixture.games.forEach(game => {
                        game.playerIds.forEach(id => allPlayerIds.add(id));
                    });
                    if (dotdPlayerId) allPlayerIds.add(dotdPlayerId);

                    allPlayerIds.forEach(id => {
                        if (!playerRefs[id]) playerRefs[id] = doc(state.db, PLAYERS_COLLECTION, id);
                    });
                    
                    const playerDocs = {};
                    for (const id in playerRefs) {
                        playerDocs[id] = await transaction.get(playerRefs[id]);
                    }

                    transaction.update(fixtureRef, { games: state.fixture.games, status: 'finished' });

                    const playerAggregates = {};
                    state.fixture.games.forEach(game => {
                        const isDoubles = game.playerIds.length > 1;
                        const totalGameScores = { scores100: 0, scores140: 0, scores180: 0 };
                        if (isDoubles) {
                            game.playerScores.forEach(pScore => {
                                totalGameScores.scores100 += pScore.scores100 || 0;
                                totalGameScores.scores140 += pScore.scores140 || 0;
                                totalGameScores.scores180 += pScore.scores180 || 0;
                            });
                        }

                        game.playerIds.forEach((playerId, i) => {
                            if (!playerAggregates[playerId]) {
                                playerAggregates[playerId] = { legsWon: 0, legsLost: 0, fines: 0, scores100: 0, scores140: 0, scores180: 0, highCheckout: 0 };
                            }
                            const pScores = game.playerScores?.[i] || {};
                            playerAggregates[playerId].legsWon += game.legsWon || 0;
                            playerAggregates[playerId].legsLost += game.legsLost || 0;
                            
                            if (!isDoubles) {
                                playerAggregates[playerId].fines += game.fines || 0;
                                playerAggregates[playerId].scores100 += pScores.scores100 || 0;
                                playerAggregates[playerId].scores140 += pScores.scores140 || 0;
                                playerAggregates[playerId].scores180 += pScores.scores180 || 0;
                                playerAggregates[playerId].highCheckout = Math.max(playerAggregates[playerId].highCheckout, game.highCheckout || 0);
                            } else {
                                playerAggregates[playerId].scores100 += totalGameScores.scores100;
                                playerAggregates[playerId].scores140 += totalGameScores.scores140;
                                playerAggregates[playerId].scores180 += totalGameScores.scores180;
                            }
                        });
                    });
                    
                    if (dotdPlayerId) {
                        if (!playerAggregates[dotdPlayerId]) {
                             playerAggregates[dotdPlayerId] = { fines: 0 };
                        }
                        playerAggregates[dotdPlayerId].fines += 250;
                    }

                    for (const playerId in playerAggregates) {
                        const stats = playerAggregates[playerId];
                        const playerRef = playerRefs[playerId];
                        const playerDoc = playerDocs[playerId];
                        if (!playerDoc.exists()) {
                            console.error(`Player with ID ${playerId} not found in transaction.`);
                            continue;
                        }
                        const currentStats = playerDoc.data()?.stats?.[seasonId] || {};
                        
                        const playerUpdate = {
                            [`stats.${seasonId}.legsWon`]: increment(stats.legsWon),
                            [`stats.${seasonId}.legsLost`]: increment(stats.legsLost),
                            [`stats.${seasonId}.fines`]: increment(stats.fines),
                            [`stats.${seasonId}.scores100`]: increment(stats.scores100),
                            [`stats.${seasonId}.scores140`]: increment(stats.scores140),
                            [`stats.${seasonId}.scores180`]: increment(stats.scores180),
                            [`stats.${seasonId}.highCheckout`]: Math.max(stats.highCheckout, currentStats.highCheckout || 0),
                        };
                        transaction.update(playerRef, playerUpdate);
                    }
                });

                showToast("Match finished and all stats saved! Well played.", false);
                ui.dotdModal.overlay.classList.add('hidden');
                ui.dotdModal.overlay.classList.remove('flex');
                switchTab('match');

            } catch (e) {
                console.error("Transaction failed: ", e);
                showToast("Failed to save match stats. Please try again.", true);
            }
        }


        async function markFinesAsPaid(playerId) {
            const playerRef = doc(state.db, "players", playerId);
            try {
                const player = state.players.find(p => p.id === playerId);
                if (!player || !player.stats) {
                    showToast("Player has no stats to clear.", true);
                    return;
                }
                const updates = {};
                for (const seasonId in player.stats) {
                    updates[`stats.${seasonId}.fines`] = 0;
                }
                await updateDoc(playerRef, updates);
                showToast("Fines cleared for player.", false);
            } catch (error) {
                console.error("Error clearing fines: ", error);
                showToast("Could not clear fines.", true);
            }
        }

        function openLowScoreModal() {
            ui.lowScoreModal.overlay.classList.remove('hidden');
            ui.lowScoreModal.overlay.classList.add('flex');
            ui.lowScoreModal.input.focus();
        }
        function closeLowScoreModal() {
            ui.lowScoreModal.overlay.classList.add('hidden');
            ui.lowScoreModal.overlay.classList.remove('flex');
            ui.lowScoreModal.input.value = '';
        }
        function submitLowScoreFine() {
            const score = parseInt(ui.lowScoreModal.input.value);
            if (score >= 1 && score <= 9) {
                addFine((10 - score) * 10, `Score of ${score}`);
                closeLowScoreModal();
            } else {
                showToast("Please enter a score between 1 and 9.", true);
            }
        }

        function openDotdModal() {
            const allPlayerIdsInFixture = [...new Set(state.fixture.games.flatMap(game => game.playerIds))];
            
            ui.dotdModal.list.innerHTML = '';
            allPlayerIdsInFixture.forEach(playerId => {
                const player = state.players.find(p => p.id === playerId);
                if (!player) return;

                let sillyThingsCount = 0;
                state.fixture.games.forEach(game => {
                    if (game.playerIds.includes(playerId)) {
                        const playerIndex = game.playerIds.indexOf(playerId);
                        sillyThingsCount += game.playerScores?.[playerIndex]?.sillyThings || 0;
                    }
                });

                const playerEl = document.createElement('div');
                playerEl.className = 'flex items-center justify-between';
                playerEl.innerHTML = `
                    <div>
                        <input id="dotd-${player.id}" name="dotd-vote" type="radio" value="${player.id}" class="h-4 w-4 text-emerald-600 border-gray-300 focus:ring-emerald-500">
                        <label for="dotd-${player.id}" class="ml-3 text-sm font-medium text-gray-700">${player.name}</label>
                    </div>
                    <span class="text-sm font-medium text-gray-500">? x ${sillyThingsCount}</span>
                `;
                ui.dotdModal.list.appendChild(playerEl);
            });

            ui.dotdModal.overlay.classList.remove('hidden');
            ui.dotdModal.overlay.classList.add('flex');
        }

        // --- INITIALIZATION ---
        async function init() {
            // --- Firebase Setup ---
            const firebaseConfig = {
                apiKey: "AIzaSyCU66DqSCzkwaEhTLEOftEJtKbt9y4xVeI",
                authDomain: "darts-app-9e752.firebaseapp.com",
                databaseURL: "https://darts-app-9e752-default-rtdb.europe-west1.firebasedatabase.app",
                projectId: "darts-app-9e752",
                storageBucket: "darts-app-9e752.appspot.com",
                messagingSenderId: "520662271304",
                appId: "1:520662271304:web:abb1ca68445511c8bb1f7d"
            };

            const app = initializeApp(firebaseConfig);
            state.db = getFirestore(app);
            state.auth = getAuth(app);
            // setLogLevel('debug');

            ui.connectionStatus.classList.remove('hidden');

            // --- Authentication ---
            try {
                const userCredential = await signInAnonymously(state.auth);
                state.userId = userCredential.user.uid;
                console.log("Authentication successful. UID:", state.userId);
            } catch (error) {
                console.error("Firebase Authentication Failed:", error);
                ui.connectionStatus.textContent = "Authentication failed. App may not work.";
                ui.connectionStatus.classList.replace('bg-yellow-100', 'bg-red-100');
                ui.connectionStatus.classList.replace('text-yellow-800', 'text-red-800');
                return;
            }

            // --- Firestore Listeners ---
            const handleError = (error, type) => {
                 console.error(`Error fetching ${type}: `, error);
                 ui.connectionStatus.innerHTML = `<strong>Database Error:</strong> Could not load ${type}. Please check Firestore security rules.`;
                 ui.connectionStatus.classList.replace('bg-yellow-100', 'bg-red-100');
                 ui.connectionStatus.classList.replace('text-yellow-800', 'text-red-800');
                 ui.connectionStatus.classList.remove('hidden');
            };

            onSnapshot(query(collection(state.db, SEASONS_COLLECTION)), (snapshot) => {
                state.seasons = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                state.seasons.sort((a,b) => a.name.localeCompare(b.name));
                const activeSeason = state.seasons.find(s => s.status === 'active');
                state.activeSeasonId = activeSeason ? activeSeason.id : null;
                render();
            }, (error) => handleError(error, 'seasons'));

            onSnapshot(query(collection(state.db, PLAYERS_COLLECTION)), (snapshot) => {
                ui.connectionStatus.classList.add('hidden');
                state.players = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                state.players.sort((a, b) => a.name.localeCompare(b.name));
                render();
            }, (error) => handleError(error, 'players'));

            onSnapshot(query(collection(state.db, FIXTURES_COLLECTION)), (snapshot) => {
                ui.connectionStatus.classList.add('hidden');
                const allFixtures = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                allFixtures.sort((a, b) => (b.createdAt?.toMillis() || 0) - (a.createdAt?.toMillis() || 0));

                const activeFixture = allFixtures.find(f => f.status === 'live');

                if (activeFixture) {
                     if (state.fixture.id !== activeFixture.id) {
                         state.fixture = activeFixture;
                         state.currentGameIndex = 0;
                     } else {
                         // If it's the same fixture, just update the games array to reflect real-time changes
                         state.fixture.games = activeFixture.games;
                     }
                } else {
                    state.fixture = { id: null, games: [] };
                }

                state.previousFixtures = allFixtures.filter(f => f.status === 'finished');
                render();
            }, (error) => handleError(error, 'fixtures'));
            
            // --- Responsive Nav Handler ---
            const handleResize = () => {
                if (window.innerWidth >= 768) { // Tailwind's md breakpoint is 768px
                    ui.desktopNav.classList.remove('hidden');
                    ui.hamburgerBtn.classList.add('hidden');
                    closeMobileMenu();
                } else {
                    ui.desktopNav.classList.add('hidden');
                    ui.hamburgerBtn.classList.remove('hidden');
                }
            };

            window.addEventListener('resize', handleResize);
            handleResize(); // Initial check on load

            // --- Event Listeners ---
            Object.keys(ui.tabs).forEach(tabName => {
                ui.tabs[tabName].addEventListener('click', () => switchTab(tabName));
            });
            ui.addPlayerBtn.addEventListener('click', addPlayer);
            ui.newPlayerInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') addPlayer(); });
            ui.addSeasonBtn.addEventListener('click', async () => {
                const name = ui.newSeasonInput.value.trim();
                if (!name) return showToast("Season name cannot be empty.", true);
                try {
                    await addDoc(collection(state.db, SEASONS_COLLECTION), { name, status: 'archived' });
                    showToast(`Season "${name}" added.`);
                    ui.newSeasonInput.value = '';
                } catch(e) { showToast("Could not add season.", true); }
            });
            ui.seasonsList.addEventListener('click', async (e) => {
                const setActiveBtn = e.target.closest('.set-active-season-btn');
                if (setActiveBtn) {
                    const newActiveId = setActiveBtn.dataset.seasonId;
                    const batch = writeBatch(state.db);
                    state.seasons.forEach(season => {
                        const seasonRef = doc(state.db, SEASONS_COLLECTION, season.id);
                        batch.update(seasonRef, { status: season.id === newActiveId ? 'active' : 'archived' });
                    });
                    await batch.commit();
                    showToast("Active season updated.");
                }
            });
            ui.createFixtureBtn.addEventListener('click', createFixture);
            ui.prevGameBtn.addEventListener('click', () => { if (state.currentGameIndex > 0) { state.currentGameIndex--; render(); } });
            ui.nextGameBtn.addEventListener('click', () => { if (state.currentGameIndex < state.fixture.games.length - 1) { state.currentGameIndex++; render(); } });

            ui.liveMatchContent.addEventListener('click', (e) => {
                const statBtn = e.target.closest('.stat-btn');
                if (statBtn) {
                     const playerIndex = statBtn.hasAttribute('data-player-index') ? parseInt(statBtn.dataset.playerIndex) : 0;
                     updateStat(statBtn.dataset.stat, parseInt(statBtn.dataset.op), playerIndex);
                }
            });

            ui.playerRoster.addEventListener('click', (e) => {
                const deleteBtn = e.target.closest('.delete-player-btn');
                if (deleteBtn) deletePlayer(deleteBtn.dataset.playerId);
            });

            ui.previousMatchesList.addEventListener('click', (e) => {
                const matchBtn = e.target.closest('button[data-fixture-id]');
                if (matchBtn) {
                    state.selectedPreviousFixtureId = matchBtn.dataset.fixtureId;
                    render();
                }
            });

            ui.finesList.addEventListener('click', (e) => {
                const payBtn = e.target.closest('.pay-fines-btn');
                if (payBtn) markFinesAsPaid(payBtn.dataset.playerId);
            });
            
            ui.seasonFilterSelect.addEventListener('change', (e) => {
                state.selectedStatsSeasonId = e.target.value;
                renderLeaderboard();
            });

            ui.leaderboardBody.addEventListener('click', (e) => {
                const row = e.target.closest('tr');
                if (row && row.dataset.playerId) {
                    state.playerCard = { isOpen: true, playerId: row.dataset.playerId, selectedSeasonId: state.selectedStatsSeasonId };
                    renderPlayerCard();
                }
            });

            ui.playerCardModal.closeBtn.addEventListener('click', () => {
                state.playerCard.isOpen = false;
                renderPlayerCard();
            });

            ui.playerCardModal.content.addEventListener('change', (e) => {
                if (e.target.id === 'player-card-season-select') {
                    state.playerCard.selectedSeasonId = e.target.value;
                    renderPlayerCard();
                }
            });

            ui.highCheckoutInput.addEventListener('input', (e) => { 
                const game = state.fixture.games[state.currentGameIndex];
                if (game) {
                    game.highCheckout = parseInt(e.target.value) || 0;
                    updateGameData();
                }
            });
            ui.fineBtn26.addEventListener('click', () => addFine(26, 'Score of 26'));
            ui.fineBtnMiss.addEventListener('click', () => addFine(50, 'Missed Board'));
            ui.fineBtnLowScore.addEventListener('click', openLowScoreModal);
            ui.lowScoreModal.cancel.addEventListener('click', closeLowScoreModal);
            ui.lowScoreModal.submit.addEventListener('click', submitLowScoreFine);
            ui.lowScoreModal.input.addEventListener('keydown', (e) => { if (e.key === 'Enter') submitLowScoreFine(); });


            ui.gameActionButtons.addEventListener('click', (e) => {
                if (e.target.id === 'finish-match-btn') openDotdModal();
            });

            ui.dotdModal.finish.addEventListener('click', () => {
                const selectedPlayer = document.querySelector('input[name="dotd-vote"]:checked');
                finishMatch(selectedPlayer ? selectedPlayer.value : null);
            });

            ui.confirmModal.cancel.addEventListener('click', closeConfirmModal);
            ui.confirmModal.confirm.addEventListener('click', handleConfirmation);
            
            // Mobile menu listeners
            ui.hamburgerBtn.addEventListener('click', openMobileMenu);
            ui.closeMenuBtn.addEventListener('click', closeMobileMenu);
            ui.mobileMenuOverlay.addEventListener('click', (e) => {
                if (e.target === ui.mobileMenuOverlay) {
                    closeMobileMenu();
                }
            });
            ui.mobileNavLinks.addEventListener('click', (e) => {
                e.preventDefault();
                const link = e.target.closest('a[data-tab-name]');
                if (link) {
                    switchTab(link.dataset.tabName);
                }
            });

            render();
        }

        // --- Start the App ---
        init();
    </script>
</body>
</html>
